These instructions were done using Ubuntu x64 running as a virtual machine on a Win7 host.

=============================
Installing the cross compiler
=============================
Unpack the "arm-linux-gcc-4.4.3.tar" file to a working directory of choice, 
/usr/local/arm/

Set the path in the /root/.bashrc script:
gedit /<user path>/.bashrc
PATH=$PATH:/usr/local/arm/4.4.3/bin:$PATH

Close the terminal and reopen.

Check that the compiler is setup correctly
arm-linux-gcc -v




============================
Compiling the MEZ1500 Kernel
============================
Note: The kernel-bin directory is used here so the kernel dir stays nice and clean for easier backup. 
The important thing to remember is to always be in the kernel dir and to always use O=../kernel-bin/ in each command.

cd to the kernel dir:
cd /MEZ1500Rev2dLinux/Sources/linux-2.6.32.2/

Create the kernel-bin directory:
mkdir ../kernel-bin

If we don't have .config then:
make O=../kernel-bin/ MEZ1500_defconfig

You can run menuconfig if you wish to change the kernel configurations:
make O=../kernel-bin/ menuconfig

Compile the kernel:
make O=../kernel-bin/ zImage

Kernel should compile ... (takes a while)

Once the kernel compiled, create uImage which is the kernel image that is in a compressed format that uboot can recognise and load into a specific address in SDRAM.
make O=../kernel-bin/ uImage

The compiled uImage location is here:
~/kernel-bin/arch/arm/boot/uImage

Other commands (to clean)
~~~~~~~~~~~~~~~~~~~~~~~~~
make O=../kernel-bin/ clean
make O=../kernel-bin/ mrproper   (really proper clean, will need to re-set up MEZ1500_defconfig again)


============================
Compiling Uboot
============================
In most cases you will not need to compile Uboot as this doesn't change much and will be the domain of the manufacturer to modify. 
However these instructions here to build the uboot image is provided for completeness.

Go to the uboot directory: 
cd /MEZ1500Rev2dLinux/Sources/uboot-1.3.2/

Enter these commands to start compilation, note that uboot will compile in-situ and not to a uboot-bin directory like the kernel does. 
This is relatively small build so a make clean before updating the package is achievable.

make mez1500_config
make all

This creates a binary file that is the compiled uboot:
u-boot-nand2k.bin

Copy these files to a windows machine:
prep_bins.bat
u-boot-nand2k.bin
PutUbootcsum.exe

Run the prep_bins.bat file at the command line, which will generate a new uboot file with an appropriate zero checksum value.
mez1500_rev2d_uboot.bin

This file will be place on an SD card with a FAT32 partition which will be recognised by the existing U-boot in the device and will 
update when you do a reset with a special key combination (both side buttons pressed simultaneously).

====================================
Preparing the SD card for linux boot
====================================
Place the SD card into an sd card reader on the PC or laptop. Ensure that if you are using a virtual machine that it can see the card.
Using gparted, create 3 partitions and volumes as follows on the SD card:
P1: 512Mbytes, FAT32 (houses uboot update file)
P2: 20Mbytes, EXT3  (Kernel)
P3: Remainder, EXT3 (Linux root file system)

Ubuntu x64 automatically mounts these volumes once they are created.

Copy the following over using Nautilus:
P1: mez1500_rev2d_uboot.bin
P2: uImage
P3: 
untar the "rootfs_qtopia_qt4.tar.gz" file to the ~/MEZ1500Rev2dLinux/RootFS/ folder, 
cd the ~/MEZ1500Rev2dLinux/RootFS/rootfs_qtopia_qt4 
Use this command to copy the files over to the P3 partition:
cp -R . <path to P3>

Note: Do NOT remove the SD card unless you have ejected the volumes in Ubuntu, as the OS buffers the writes to the volumes on the card.

After ejecting, remove the card from the card reader and place it in the device.

=====================================
Updating u-boot on the MEZ1500 device
=====================================

Reset the device using Power and backlight key presses together for more than 2 seconds. The device will hardware reset on release.

Straigt after release press both side buttons (NOT side arrows) on the device while it is booting up. This will force the existing u-boot
in NAND to look in the SD card FAT32 partition for an updated copy. It will then proceed to check the integrity of the "mez1500_rec2d_uboot.bin"
file and write it to NAND. It will then reboot itself. 

Upon rebooting it should automatically detect the kernel partition on the SD card and boot Linux and the qtopia file system. 

===================================
Using a MZIO UART1 debugging module
===================================

With a UART1 debugging module (fitted as an MZIO module), you will be able to see the debugging UART of the device. This will enable full control of the OS.
During the loading process you should be able to see the stream of debugging information out this port, and eventuallty you will be able to enter
the MEZ1500 command line prompt. 

========================
USB gadget RNDIS support
========================
Plug the USB cable into a Win7 machine and it will automatically set up an RNDIS connection, allowing for networking between the device and the computer. 
You will need to bridge this new connection with the main ethernet or wifi connection using the Win7 bridge creating tool (just select more than one connection
and choose to bridge them). Once the bridge has been setup, right click on the bridge device and select to adjust its properties. It is best when developing
to ensure that the development PC has a fixed IP address (causes fewer headaches), ensuring that the default gateway and DNS addresses are pointed to the routers
address as required. This will enable the MEZ1500 through the RNDIS to connect to the internet. 


<to be continued>































